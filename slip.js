// Generated by CoffeeScript 1.7.1
(function(WIN, DOC) {
  var CSS_PREFIX_MAP, MAX_OPP_ALLOW_DISTANCE, MIN_ALLOW_DISTANCE, Slip, X, XY, Y, noop, setTranslate, slip;
  MIN_ALLOW_DISTANCE = 10;
  MAX_OPP_ALLOW_DISTANCE = 40;
  CSS_PREFIX_MAP = ["webkit", "moz", "ms", "o"];
  X = "x";
  Y = "y";
  XY = "xy";
  noop = function() {};

  /*
   * 设置元素的CSS位移
   * ele 原生的DOM元素
   */
  setTranslate = function(ele, x, y, z) {
    var cssPrefix, name, prefix, _i, _len, _results;
    cssPrefix = CSS_PREFIX_MAP.concat([]);
    cssPrefix.push("");
    _results = [];
    for (_i = 0, _len = cssPrefix.length; _i < _len; _i++) {
      prefix = cssPrefix[_i];
      name = prefix ? "" + prefix + "Transform" : "transform";
      _results.push(ele.style[name] = "translate3d(" + (x || 0) + "px, " + (y || 0) + "px, " + (z || 0) + "px)");
    }
    return _results;
  };
  Slip = (function() {
    var getCoordinates;

    getCoordinates = function(event) {
      var e, touches;
      touches = event.touches && (event.touches.length ? event.touches : [event]);
      e = (event.changedTouches && event.changedTouches[0]) || (event.originalEvent && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0]) || touches[0].originalEvent || touches[0];
      return {
        "x": e.clientX,
        "y": e.clientY
      };
    };

    function Slip(ele, direction) {
      this.ele = ele;
      this.direction = direction;
      this.coord = null;
      this.onStart = this.onMove = this.onEnd = noop;
      this.eventCoords = null;
      this.cacheCoords = null;
    }

    Slip.prototype.start = function(fn) {
      return (this.onStart = fn) && this;
    };

    Slip.prototype.move = function(fn) {
      return (this.onMove = fn) && this;
    };

    Slip.prototype.end = function(fn) {
      return (this.onEnd = fn) && this;
    };

    Slip.prototype.setCoord = function(userCoords) {
      var attr, coords, ele;
      coords = this.coord = {
        "x": userCoords[X] || 0,
        "y": userCoords[Y] || 0
      };
      ele = this.ele;
      setTranslate(ele, coords[X], coords[Y]);
      for (attr in coords) {
        ele.setAttribute(attr, coords[attr]);
      }
      return this;
    };

    Slip.prototype.onTouchStart = function(event) {
      this.eventCoords = getCoordinates(event);
      this.cacheCoords = this.coord;
      return this.onStart.apply(this, [event]);
    };

    Slip.prototype.onTouchMove = function(event) {
      var absEventMove, attr, direction, ele, eleMove, eventMove, moveCoords, oppDirection;
      event.preventDefault();
      moveCoords = getCoordinates(event);
      direction = this.direction;
      eventMove = {
        "x": moveCoords.x - this.eventCoords.x,
        "y": moveCoords.y - this.eventCoords.y
      };
      absEventMove = {
        "x": Math.abs(eventMove[X]),
        "y": Math.abs(eventMove[Y])
      };
      eleMove = this.coord = {
        "x": direction.indexOf(X) < 0 ? this.cacheCoords[X] : this.cacheCoords[X] - 0 + eventMove[X],
        "y": direction.indexOf(Y) < 0 ? this.cacheCoords[Y] : this.cacheCoords[Y] - 0 + eventMove[Y]
      };
      if (direction !== XY) {
        oppDirection = direction === X ? Y : X;
        if (absEventMove[direction] < MIN_ALLOW_DISTANCE || absEventMove[oppDirection] > MAX_OPP_ALLOW_DISTANCE) {
          return false;
        }
      }
      ele = this.ele;
      setTranslate(ele, eleMove[X], eleMove[Y]);
      for (attr in eleMove) {
        ele.setAttribute(attr, eleMove[attr]);
      }
      return this.onMove.apply(this, [event]);
    };

    Slip.prototype.onTouchEnd = function(event) {
      var ele;
      ele = this.ele;

      /*
      @coord = 
        "x": ele.getAttribute(X) - 0
        "y": ele.getAttribute(Y) - 0
       */
      return this.onEnd.apply(this, [event]);
    };

    Slip.prototype.init = function() {
      var attr, direction, ele, initMove, onTouchEnd, onTouchMove, onTouchStart;
      this.coord = {
        "x": 0,
        "y": 0
      };
      onTouchStart = this._onTouchStart = (function(_this) {
        return function(event) {
          return _this.onTouchStart(event);
        };
      })(this);
      onTouchMove = this._onTouchMove = (function(_this) {
        return function(event) {
          return _this.onTouchMove(event);
        };
      })(this);
      onTouchEnd = this._onTouchEnd = (function(_this) {
        return function(event) {
          return _this.onTouchEnd(event);
        };
      })(this);
      ele = this.ele;
      ele.addEventListener("touchstart", onTouchStart, false);
      ele.addEventListener("touchmove", onTouchMove, false);
      ele.addEventListener("touchend", onTouchEnd, false);
      initMove = this.coord = {
        "x": 0,
        "y": 0
      };
      direction = this.direction;
      setTranslate(ele, initMove[X], initMove[Y]);
      for (attr in initMove) {
        ele.setAttribute(attr, initMove[attr]);
      }
      return this;
    };

    Slip.prototype.destroy = function() {
      var ele;
      ele = this.ele;
      ele.removeEventListener("touchstart", this._onTouchStart, false);
      ele.removeEventListener("touchmove", this._onTouchMove, false);
      ele.removeEventListener("touchend", this._onTouchEnd, false);
      return this;
    };

    return Slip;

  })();
  slip = function(ele, direction) {
    var instance;
    instance = new Slip(ele, direction || X);
    return instance.init();
  };
  return WIN.Slip = slip;
})(window, document);
